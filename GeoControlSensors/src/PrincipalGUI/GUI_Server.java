/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI_Server.java
 *
 * Created on 30/05/2011, 10:13:46 AM
 */
package PrincipalGUI;

import Comunicacion.MultiServer;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author kradac
 */
public class GUI_Server extends javax.swing.JFrame {

    private MultiServer servidor;

    /** Creates new form GUI_Server */
    public GUI_Server() {
        super.setIconImage(new ImageIcon(getClass().getResource("/iconos/kradac_icono.png")).getImage());
        initComponents();
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                pararServidorConexiones(true);
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciar = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        btnIniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/velocidad.png"))); // NOI18N
        btnIniciar.setToolTipText("Iniciar servidor...");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-164)/2, (screenSize.height-188)/2, 164, 188);
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if (btnIniciar.isSelected()) {

            Thread server = new Thread(new Runnable() {

                public void run() {
                    try {
                        servidor = new MultiServer(444);
                        servidor.escucharConexiones();
                    } catch (IOException ex) {
                        //Logger.getLogger(GUI_Server.class.getName()).log(Level.SEVERE, null, ex);
                        if (!ex.getMessage().equals("socket closed")) {
                            System.out.println(ex.getMessage());
                            JOptionPane.showMessageDialog(null,
                                    "No se puede escuchar en ese puerto...",
                                    "Error...", 0);
                        }
                        btnIniciar.setSelected(false);
                    }
                }
            });
            server.start();

        } else {
            /**
             * Solo para la ejecución del servidor mostrando el mensaje no cierra
             * la ventana
             */
            pararServidorConexiones(false);
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI_Server().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnIniciar;
    // End of variables declaration//GEN-END:variables

    /**
     * Muestra el mensaje de advertencia de que si esta seguro de parar el servidor
     * si el parametro es true cierra la ventana de la aplicación caso contrario
     * solo cierra la conexion del servidor para no aceptar mas datos
     * @param salir
     */
    private void pararServidorConexiones(boolean salir) {
        int op = JOptionPane.showConfirmDialog(null,
                "Esta seguro que quiere detener el monitor de sensores...",
                "Alerta...",
                2,
                JOptionPane.YES_NO_OPTION);
        if (op == 0) {
            //si es true significa que pulso la x hay que salir
            if (salir) {
                //System.out.println("Salir");
                System.exit(0);
            }
            cerrarConexiones();
        } else {
            //salir es false significa que se dio clic en el boton
            //si es true es la x de la ventana
            if (salir) {
                btnIniciar.setSelected(btnIniciar.isSelected());
            } else {
                btnIniciar.setSelected(true);
            }
        }
    }

    /**
     * Cierra todas las conexiones abiertas con el servidor
     */
    private void cerrarConexiones() {
        try {
            servidor.cerrarConexionServidorMultiple();
            System.out.println("Parar servidor no se aceptan mas conexiones...");
        } catch (IOException ex) {
            Logger.getLogger(GUI_Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
